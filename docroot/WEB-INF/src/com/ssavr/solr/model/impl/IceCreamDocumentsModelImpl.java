/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ssavr.solr.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.ssavr.solr.model.IceCreamDocuments;
import com.ssavr.solr.model.IceCreamDocumentsModel;
import com.ssavr.solr.model.IceCreamDocumentsSoap;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the IceCreamDocuments service. Represents a row in the &quot;solr_IceCreamDocuments&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ssavr.solr.model.IceCreamDocumentsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IceCreamDocumentsImpl}.
 * </p>
 *
 * @author SAVRAMIS
 * @see IceCreamDocumentsImpl
 * @see com.ssavr.solr.model.IceCreamDocuments
 * @see com.ssavr.solr.model.IceCreamDocumentsModel
 * @generated
 */
@JSON(strict = true)
public class IceCreamDocumentsModelImpl extends BaseModelImpl<IceCreamDocuments>
	implements IceCreamDocumentsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ice cream documents model instance should use the {@link com.ssavr.solr.model.IceCreamDocuments} interface instead.
	 */
	public static final String TABLE_NAME = "solr_IceCreamDocuments";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "iceCreamDocumentsId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "documentId", Types.BIGINT },
			{ "iceCreamId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table solr_IceCreamDocuments (uuid_ VARCHAR(75) null,iceCreamDocumentsId LONG not null primary key,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,documentId LONG,iceCreamId LONG)";
	public static final String TABLE_SQL_DROP = "drop table solr_IceCreamDocuments";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ssavr.solr.model.IceCreamDocuments"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ssavr.solr.model.IceCreamDocuments"),
			true);

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static IceCreamDocuments toModel(IceCreamDocumentsSoap soapModel) {
		IceCreamDocuments model = new IceCreamDocumentsImpl();

		model.setUuid(soapModel.getUuid());
		model.setIceCreamDocumentsId(soapModel.getIceCreamDocumentsId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setDocumentId(soapModel.getDocumentId());
		model.setIceCreamId(soapModel.getIceCreamId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<IceCreamDocuments> toModels(
		IceCreamDocumentsSoap[] soapModels) {
		List<IceCreamDocuments> models = new ArrayList<IceCreamDocuments>(soapModels.length);

		for (IceCreamDocumentsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public Class<?> getModelClass() {
		return IceCreamDocuments.class;
	}

	public String getModelClassName() {
		return IceCreamDocuments.class.getName();
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ssavr.solr.model.IceCreamDocuments"));

	public IceCreamDocumentsModelImpl() {
	}

	public long getPrimaryKey() {
		return _iceCreamDocumentsId;
	}

	public void setPrimaryKey(long primaryKey) {
		setIceCreamDocumentsId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_iceCreamDocumentsId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@JSON
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	public void setUuid(String uuid) {
		_uuid = uuid;
	}

	@JSON
	public long getIceCreamDocumentsId() {
		return _iceCreamDocumentsId;
	}

	public void setIceCreamDocumentsId(long iceCreamDocumentsId) {
		_iceCreamDocumentsId = iceCreamDocumentsId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public long getDocumentId() {
		return _documentId;
	}

	public void setDocumentId(long documentId) {
		_documentId = documentId;
	}

	@JSON
	public long getIceCreamId() {
		return _iceCreamId;
	}

	public void setIceCreamId(long iceCreamId) {
		_iceCreamId = iceCreamId;
	}

	@Override
	public IceCreamDocuments toEscapedModel() {
		if (isEscapedModel()) {
			return (IceCreamDocuments)this;
		}
		else {
			if (_escapedModelProxy == null) {
				_escapedModelProxy = (IceCreamDocuments)Proxy.newProxyInstance(_classLoader,
						_escapedModelProxyInterfaces,
						new AutoEscapeBeanHandler(this));
			}

			return _escapedModelProxy;
		}
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
					IceCreamDocuments.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		IceCreamDocumentsImpl iceCreamDocumentsImpl = new IceCreamDocumentsImpl();

		iceCreamDocumentsImpl.setUuid(getUuid());
		iceCreamDocumentsImpl.setIceCreamDocumentsId(getIceCreamDocumentsId());
		iceCreamDocumentsImpl.setCompanyId(getCompanyId());
		iceCreamDocumentsImpl.setUserId(getUserId());
		iceCreamDocumentsImpl.setCreateDate(getCreateDate());
		iceCreamDocumentsImpl.setModifiedDate(getModifiedDate());
		iceCreamDocumentsImpl.setDocumentId(getDocumentId());
		iceCreamDocumentsImpl.setIceCreamId(getIceCreamId());

		iceCreamDocumentsImpl.resetOriginalValues();

		return iceCreamDocumentsImpl;
	}

	public int compareTo(IceCreamDocuments iceCreamDocuments) {
		long primaryKey = iceCreamDocuments.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		IceCreamDocuments iceCreamDocuments = null;

		try {
			iceCreamDocuments = (IceCreamDocuments)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = iceCreamDocuments.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<IceCreamDocuments> toCacheModel() {
		IceCreamDocumentsCacheModel iceCreamDocumentsCacheModel = new IceCreamDocumentsCacheModel();

		iceCreamDocumentsCacheModel.uuid = getUuid();

		String uuid = iceCreamDocumentsCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			iceCreamDocumentsCacheModel.uuid = null;
		}

		iceCreamDocumentsCacheModel.iceCreamDocumentsId = getIceCreamDocumentsId();

		iceCreamDocumentsCacheModel.companyId = getCompanyId();

		iceCreamDocumentsCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			iceCreamDocumentsCacheModel.createDate = createDate.getTime();
		}
		else {
			iceCreamDocumentsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			iceCreamDocumentsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			iceCreamDocumentsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		iceCreamDocumentsCacheModel.documentId = getDocumentId();

		iceCreamDocumentsCacheModel.iceCreamId = getIceCreamId();

		return iceCreamDocumentsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", iceCreamDocumentsId=");
		sb.append(getIceCreamDocumentsId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", documentId=");
		sb.append(getDocumentId());
		sb.append(", iceCreamId=");
		sb.append(getIceCreamId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.ssavr.solr.model.IceCreamDocuments");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>iceCreamDocumentsId</column-name><column-value><![CDATA[");
		sb.append(getIceCreamDocumentsId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentId</column-name><column-value><![CDATA[");
		sb.append(getDocumentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>iceCreamId</column-name><column-value><![CDATA[");
		sb.append(getIceCreamId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = IceCreamDocuments.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			IceCreamDocuments.class
		};
	private String _uuid;
	private long _iceCreamDocumentsId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private long _documentId;
	private long _iceCreamId;
	private transient ExpandoBridge _expandoBridge;
	private IceCreamDocuments _escapedModelProxy;
}